# zmodload zsh/zprof
# Check available locales
# available_locales=$(locale -a)

# export LANGUAGE="C.utf8"
# 
# # Function to set the locale environment variables
# set_locale() {
#   export LANG=$1
#   export LANGUAGE=$1
# }
# 
# # Preferred locales in order
# preferred_locales=("en_US.utf8" "C.utf8")
# 
# # Loop through preferred locales and set the first one that is available
# for locale in "${preferred_locales[@]}"; do
#   if echo "$available_locales" | grep -q "^$locale"; then
#     set_locale $locale
#     echo "Locale set to $locale"
#     break
#   fi
# done

if ! command -v nix > /dev/null 2>&1; then
    if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then . $HOME/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
fi

# Check if the terminal supports tmux-256color, and if not set it to xterm
if [ "$TERM" = "tmux-256color" ]; then
    if ! infocmp tmux-256color >/dev/null 2>&1; then
        export TERM=screen-256color
    fi
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.

export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.


function colemak_l() {
    zle beginning-of-line
    zvm_enter_insert_mode
}

zvm_after_lazy_keybindings() {
    zvm_define_widget colemak_l

    bindkey -M vicmd 'l' zvm_enter_insert_mode
    zvm_bindkey vicmd 'L' colemak_l
    bindkey -M vicmd 'n' down-line-or-history
    bindkey -M vicmd 'e' up-line-or-history
    bindkey -M vicmd 'i' vi-forward-char
}

ZVM_VI_INSERT_ESCAPE_BINDKEY=,s

plugins=(
    git
    zsh-vi-mode
    fzf-zsh-plugin
    zsh-autosuggestions
    zsh-syntax-highlighting
    fast-syntax-highlighting
    zsh-autocomplete
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if command -v nvim >/dev/null 2>&1; then
    export EDITOR="nvim"
    export ZVM_VI_EDITOR="nvim"
fi

export CHEZ_EDITOR='chezmoi edit --watch'

alias nvimrc="$EDITOR ~/.config/nvim/init.lua"
alias nvimh="cd ~/.config/nvim"
alias nvimd="cd ~/.config/nvim"
alias tmuxconf="$CHEZ_EDITOR ~/.tmux.conf.local"

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases

export PATH="$HOME/.local/bin:$PATH"

# Config profiles
alias bashrc="$CHEZ_EDITOR ~/.bashrc"
alias zshrc="$CHEZ_EDITOR ~/.zshrc"
alias profile="zshrc"
alias vimprofile="$EDITOR ~/.vimrc"
alias nvimrc="$EDITOR ~/.config/nvim/init.lua"

# System aliases

alias rm='rm -i'

alias ls='ls -aF'
alias l='ls -AF'
alias la='ls -lAF'
alias ll='ls -lAF'

my_nix_install() {
    if [ -x "$(command -v nix-env)" ]; then
        packages=(
            "nvim:nixpkgs.neovim"
            "git:nixpkgs.git"
            "lsd:nixpkgs.lsd"
            "fd:nixpkgs.fd"
            "zoxide:nixpkgs.zoxide"
            "rg:nixpkgs.ripgrep"
            "dust:nixpkgs.dust"
            "bat:nixpkgs.bat"
            "fastfetch:nixpkgs.fastfetch"
            "gita:nixpkgs.gita"
            "tere:nixpkgs.tere"
            "broot:nixpkgs.broot"
            "delta:nixpkgs.delta"
        )

        for package in "${packages[@]}"; do
            cmd="${package%%:*}"
            nixpkg="${package##*:}"
            if ! [ -x "$(command -v $cmd)" ]; then
                nix-env -iA "$nixpkg"
            fi
        done

    else
        echo "my warning: nix not installed"
    fi
}

# Function to check if a command exists
function command_exists {
    command -v "$1" >/dev/null 2>&1
}

# Conditionally set alias for `dust`
if command_exists dust; then
    alias du='dust'
fi

# Conditionally set alias for `bat`
if command_exists bat; then
    alias cat='bat'
fi

# Conditionally set alias for `broot`
if command_exists broot; then
    alias tree='broot'
fi

if command_exists difft; then
    alias diff='difft --color=always'
fi

if command_exists delta; then
    alias diff='delta'
    source <(delta --generate-completion zsh)
fi

if [ -x "$(command -v exa)" ]; then
    alias ls='exa -aF'
    alias l='exa -aF'
    alias la='exa -laF'
    alias ll='exa -laF'
else
    alias ls='ls -aF'
    alias l='ls -AF'
    alias la='ls -lAF'
    alias ll='ls -lAF'
fi

if [ -x "$(command -v lsd)" ]; then
    alias ls='lsd -aF'
    alias l='lsd -aF'
    alias la='lsd -laF'
    alias ll='lsd -laF'
fi

alias sl='ls'

alias lz='lazygit'
alias lg='lazygit'

alias which="which -a"
which-alias() {
    alias | grep "^$1"
}

alias ppath='echo "$PATH" | tr ":" "\n" | nl'

## Safety Features
alias cp='cp -i' # confirm before overwriting something
alias mv='mv -i' # confirm before overwriting something

## utility aliases
mc() {
    mkdir $@
    cd $@
}

## editor aliases
alias nv='nvim'
alias v='nvim'
alias vim='nvim'

function vx() {
    trap 'return' INT

    local root_dir
    root_dir=$(git rev-parse --show-toplevel 2>/dev/null || echo ".")

    local file_to_open
    file_to_open=$(fd --type f . "$root_dir" | fzf --height 40% --reverse)

    if ! [ -f "$file_to_open" ]; then
        echo "No file selected"
        return
    fi

    nvim "$file_to_open"
}
alias vx='vx'

alias gcd='cd $(git rev-parse --show-toplevel || echo ".")' # go to git root directory

## Navigation aliases
function cl() {
    builtin cd "$@" && ls
}

alias cd='cl'
alias c='cl'
alias cz='DIR=$(zoxide query -l | fzf) && [[ -n $DIR ]] && cd "$DIR"'
alias cx='DIR=$(fd . -H --type d $HOME | fzf) && [[ -n $DIR ]] && cd "$DIR"'
alias cf='cd "$(fd . -H --type f | fzf --height 40% --reverse | xargs -I {} dirname {})"'
alias up='cd ..'                                            # Move up one directory
alias back='cd -$OLDPWD'                                    # Return to the previous directory
alias pr='cd $(git rev-parse --show-toplevel || echo ".")'  # go to git root directory
alias pcd='cd $(git rev-parse --show-toplevel || echo ".")' # go to git root directory
alias gr='cd $(git rev-parse --show-toplevel || echo ".")'  # go to git root directory
alias gcd='cd $(git rev-parse --show-toplevel || echo ".")' # go to git root directory

function gcx() {
    local gitRoot=$(git rev-parse --show-toplevel 2>/dev/null || echo ".")
    cd "$gitRoot" || return

    local DIR=$(fd --type d . | fzf) && [[ -n $DIR ]] && cd "$DIR"
}

## Networking and System Information
alias ports='netstat -tulanp'
alias ipinfo='curl ipinfo.io' # Quick IP address and network info
alias myip='curl http://ipecho.net/plain
echo' # External IP address

# Git Aliases
alias ga='git add'
alias gc='git commit'
alias gcm='git commit -m'
alias gcv='git commit --verbose'

## git diff
alias gd='git diff'
alias gds='git diff --staged'
alias gdc='git diff --cached'

## git log
alias gg='git-graph'
alias gl='GIT_PAGER="less -iRFSX" git log --graph --color --pretty=format:"%C(yellow)%h%C(reset) %C(blue)%an%C(reset) %C(red)%ad%C(reset)%C(cyan)%d%C(reset) %C(white)%s%C(reset)" --date=short'
alias gloga='GIT_PAGER="less -iRFSX" git log --graph --all --color --pretty=format:"%C(yellow)%h%C(reset) %C(blue)%an%C(reset) %C(red)%ad%C(reset)%C(cyan)%d%C(reset) %C(white)%s%C(reset)" --date=short'
alias gla='gloga'

## git pull
alias gpl='git pull'
alias gpom='git pull origin main'

## git push
alias gfp='git fetch --prune --all'
alias gfpa='git fetch --prune --all'
alias gp='git push'
alias gps='git push'
alias gpsoh='git push origin HEAD'
alias gpoh='git push origin HEAD'

## git status
alias gs='git status'
alias gst='git status'

## git switch
alias gb='git branch'
alias gsw='git switch'
alias gco='git checkout'

## git etc
alias gcz="~/.local/bin/cz"
alias gfz="git fuzzy"

# Deveplopment and Programming aliases

## tmux
alias tm='tmux a || tmux'

## python
alias py='python3'

run_project() {
  if [ -f Cargo.toml ]; then
    echo "Detected Rust project."
    cargo run
  elif [ -f package.json ]; then
    echo "Detected Node.js project."
    npm start
  elif [ -f setup.py ]; then
    echo "Detected Python project."
    python setup.py
  elif [ -f main.py ]; then
    echo "Detected Python project."
    python main.py
  elif [ -f Makefile ]; then
    echo "Detected project with Makefile."
    make
  elif [ -f go.mod ]; then
    echo "Detected Go module."
    go run .
  elif [ -f main.go ]; then
    echo "Detected Go project."
    go run main.go
  elif [ -f CMakeLists.txt ]; then
    echo "Detected CMake project."
    cmake . && make
  elif [ -f build.gradle ]; then
    echo "Detected Gradle project."
    ./gradlew run
  elif [ -f pom.xml ]; then
    echo "Detected Maven project."
    mvn compile exec:java
  elif [ -f requirements.txt ]; then
    echo "Detected Python project with requirements.txt."
    python -m pip install -r requirements.txt
    python main.py
  elif [ -f Gemfile ]; then
    echo "Detected Ruby project."
    bundle exec ruby main.rb
  elif [ -f manage.py ]; then
    echo "Detected Django project."
    python manage.py runserver
  else
    echo "No recognized project files found. Please add a specific case to the script."
  fi
}
alias x='run_project'

## docker
alias doc='docker' # Never use do. It is part of zsh shell grammar.
alias dc='docker compose'
alias dco='docker compose'
alias dcu='docker compose up'
alias dcub='docker compose up --build'
alias dcd='docker compose down'
alias dcr='docker compose run'
alias dcb='docker compose build'
alias dcl='docker compose logs'

# nix aliases
alias nx='nix-shell'

## wsl aliases
if [ -x "$(command -v wslpath)" ]; then
    alias wh="cd $(wslpath $(cmd.exe /C "echo %USERPROFILE%" 2>/dev/null | tr -d '\r'))"
    alias ws="webstorm64.exe"
    alias ii="explorer.exe"
    alias open="explorer.exe"
fi

# init setup

## neovim
export PATH="$PATH:/opt/nvim-linux64/bin"

## zoxide
eval "$(zoxide init zsh)"

## starship
eval "$(starship init zsh)"

## zplug
source ~/.zplug/init.zsh
### plugins
zplug "MichaelAquilina/zsh-you-should-use"
zplug "bigH/git-fuzzy", as:command, use:"bin/git-fuzzy"

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo
        zplug install
    fi
fi
zplug load --verbose

## nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion


precmd () { echo -n "\x1b]1337;CurrentDir=$(pwd)\x07" }

## chezmoi
alias chz='chezmoi'
alias chez='chezmoi'
alias che='chezmoi edit --watch'
alias cheze='chezmoi edit --watch'
alias chzd='cd ~/.local/share/chezmoi'
alias chzh='cd ~/.local/share/chezmoi'
alias chezd='cd ~/.local/share/chezmoi'
alias chezh='cd ~/.local/share/chezmoi'
alias chezcd='cd ~/.local/share/chezmoi'

# source scl_source enable devtoolset-8
# source /opt/rh/devtoolset-8/enable

# export MAKEFLAGS="-j $(nproc)"

# Set JAVA_HOME
export JAVA_HOME=$(dirname $(dirname $(dirname $(readlink -f $(/usr/bin/which java)))))
export PATH=$JAVA_HOME/bin:$PATH
echo "\nJAVA_HOME is set to $JAVA_HOME\n"

## CUBRID necessary env vars

# Check if the OS is CentOS 7 and source the devtoolset-8 script
if [[ -f /etc/centos-release ]]; then
  if grep -q "CentOS Linux release 7" /etc/centos-release; then
    source /opt/rh/devtoolset-8/enable
  fi
fi

# export CUBRID=$HOME/CUBRID
# export CUBRID_DATABASES=$CUBRID/databases
# export PATH=$CUBRID/bin:$PATH
# export LD_LIBRARY_PATH=$CUBRID/lib:$CUBRID/cci/lib:$LD_LIBRARY_PATH

## CUBRID aliases begin
#
source ~/my-cubrid/aliases.sh

## CUBRID aliases end

# Enable fuzzy autocomplete
# e.g. ctda<tab> -> cu_trace_dump_all magic
# https://superuser.com/a/815317

# mappings after zsh-vim
zvm_after_init() {
    source ~/.fzf/shell/key-bindings.zsh
    source ~/.fzf/shell/completion.zsh
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
    bindkey '^I' menu-select
    bindkey "$terminfo[kcbt]" menu-select
    bindkey -M menuselect '^I' menu-complete
    bindkey -M menuselect "$terminfo[kcbt]" reverse-menu-complete
}

# Auto-run tmux if not on SSH
if [ -z "$SSH_CONNECTION" ] && [ "$TERM_PROGRAM" != "vscode" ]; then
    # Check if tmux is runnin:g
    if ! command -v tmux &>/dev/null; then
        echo "tmux is not installed. Please install tmux to use this feature."
    else
        if [ -z "$TMUX" ]; then

            if [ -n "$TERM_PROGRAM" ] && [ "$TERM_PROGRAM" = "WezTerm" ]; then
                tmux attach-session -t wezterm || tmux new-session -t wezterm

            elif [ -n "$WT_SESSION" ]; then
                tmux attach-session -t winterm || tmux new-session -s winterm

            elif [ -z "$(tmux ls)" ]; then
                tmux new-session
            else
                tmux attach-session || tmux new-session
            fi
        fi
    fi
fi

MANPAGER='most'

alias rrkernel='sudo sysctl kernel.perf_event_paranoid=1'

if command -v fastfetch > /dev/null 2>&1; then
    fastfetch
fi

# direnv
eval "$(direnv hook zsh)"

clip() {
    if grep -qi microsoft /proc/version; then
        clip.exe "$@"
    else
        xclip -selection clipboard "$@"
    fi
}

export PATH=$PATH:/usr/local/go/bin

# tere
tere() {
    local result=$(command tere "$@")
    [ -n "$result" ] && cd -- "$result"
}

function yy() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}

alias ct='tere'

export PATH=$PATH:$HOME/go/bin
# zprof
