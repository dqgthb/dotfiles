# zmodload zsh/zprof

# set -v


# LOCALE
if [[ -f /etc/centos-release ]]; then
  if grep -q "CentOS Linux release 7" /etc/centos-release; then
    export LANG=en_US.UTF-8
  fi
fi


# PATH
export PATH=$HOME/bin:/usr/local/bin:$PATH

## rust
export PATH="$HOME/.local/bin:$PATH"
export MANPATH="/usr/local/man:$MANPATH"
export MANWIDTH=999

##  go
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:$HOME/go/bin

## java
export JAVA_HOME=$(dirname $(dirname $(dirname $(readlink -f $(/usr/bin/which java)))))
export PATH=$JAVA_HOME/bin:$PATH

. ~/.asdf/plugins/java/set-java-home.zsh

export MAKEFLAGS="-j$(nproc)"
export LESS='-iRFSX'

# Check if the OS is CentOS 7 and source the devtoolset-8 script
if [[ -f /etc/centos-release ]]; then
  if grep -q "CentOS Linux release 7" /etc/centos-release; then
    source /opt/rh/devtoolset-8/enable
  fi
fi

# ccache
# Check if 'ccache' exists and if '/usr/lib/ccache' directory exists
if command -v ccache > /dev/null 2>&1 && [ -d "/usr/lib/ccache/bin" ];then
  # arch linux
  export PATH="/usr/lib/ccache/bin:$PATH"
elif command -v ccache >/dev/null 2>&1 && [ -d "/usr/lib/ccache" ]; then
  # ubuntu
  export PATH="/usr/lib/ccache:$PATH"
fi


# Check if the OS is Arch Linux
if [[ -f /etc/os-release && $(grep -oP '(?<=^ID=).+' /etc/os-release) == "arch" ]]; then
  export CC=gcc-13
  export CXX=g++-13
fi



# Preferred editor for local and remote sessions
if command -v nvim >/dev/null 2>&1; then
    export EDITOR="nvim"
    export ZVM_VI_EDITOR="nvim"
fi


# nix
if ! command -v nix > /dev/null 2>&1; then
    if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then . $HOME/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
fi
## https://nixos.wiki/wiki/Locales
## if not set, lazygit on ubuntu will complain about locale
export LOCALE_ARCHIVE=/usr/lib/locale/locale-archive

my_nix_install() {
    local package_file="$HOME/.config/my-nix/nix-packages.txt"

    # Early exit if Nix is not installed
    if ! command -v nix-env > /dev/null; then
        echo "Nix is not installed or not in PATH" >&2
        return 1
    fi

    # Early exit if the package file doesn't exist
    if [[ ! -f "$package_file" ]]; then
        echo "Package file not found: $package_file" >&2
        return 1
    fi

    # Read the package file and install missing packages
    while IFS= read -r pkg; do
        # Skip if the package is already installed
        if command -v "$pkg" > /dev/null; then
            echo "$pkg is already installed"
            continue
        fi
        
        # Install the package
        echo "Installing $pkg from nixpkgs..."
        if ! nix-env -iA nixpkgs."$pkg"; then
            echo "Failed to install $pkg" >&2
        fi
    done < "$package_file"
}

my-utils-install() {
  npm install xcv --global
}

# zellij
if ! command -v zellij > /dev/null 2>&1; then
  echo "warning: zellij not installed"
fi
zellij_new_if_cannot_attach() {
  if [ -n "$TERM_PROGRAM" ] && [ "$TERM_PROGRAM" = "WezTerm" ]; then
    zellij attach -c my-wezterm

  elif [ -n "$WT_SESSION" ]; then
    zellij attach -c my-winterm

  elif [ -n "$TERM" ] && [ "$TERM" = "alacritty" ]; then
    zellij attach -c my-alacritty

  else
    zellij a || zellij
  fi
}
alias za='zellij_new_if_cannot_attach'
alias zl='zellij_new_if_cannot_attach'
alias zell='zellij'

# Auto-run zellij if not on SSH, VS Code, Docker, etc.
zellij_autorun() {
  if [ -n "$SSH_CONNECTION" ]; then
    echo "Inside an SSH session. zellij not used."
    return
  fi

  if [ "$TERM_PROGRAM" = "vscode" ]; then
    echo "Inside VS Code. zellij not used."
    return
  fi

  if grep -q docker /proc/1/cgroup; then
    echo "Inside a Docker container. zellij not used."
    return
  fi

  if ! command -v zellij &>/dev/null; then
    echo "zellij is not installed. Please install zellij to use this feature."
    return
  fi

  if [ -z "$ZELLIJ" ]; then
    zl
  fi
}
zellij_autorun

zellij_tab_name_update() {
    if [[ -n $ZELLIJ ]]; then
        local current_dir=$PWD
        if [[ $current_dir == $HOME ]]; then
            current_dir="~"
        else
            current_dir=${current_dir##*/}
        fi

        # Abbreviate if the name is longer than 10 characters
        local max_length=10
        if [[ ${#current_dir} -gt $max_length ]]; then
            current_dir="${current_dir:0:$max_length}~"
        fi

        command nohup zellij action rename-tab "$current_dir" >/dev/null 2>&1
    fi
}

zellij_tab_name_update
chpwd_functions+=(zellij_tab_name_update)


# ohmyzsh
export ZSH="$HOME/.oh-my-zsh"
source $ZSH/oh-my-zsh.sh


export CHEZ_EDITOR='chezmoi edit --watch'

clip() {
    if grep -qi microsoft /proc/version; then
        clip.exe "$@"
    else
        xclip -selection clipboard "$@"
    fi
}

# fzf
# https://github.com/junegunn/fzf
# git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
# ~/.fzf/install
if !command -v fzf >/dev/null 2>&1; then
  echo "warning: fzf not installed."
fi
if [ -f ~/.fzf.zsh ]; then
    source ~/.fzf.zsh
else
    echo "Warning: ~/.fzf.zsh not found!"
fi
if [ -f ~/fzf-git.sh/fzf-git.sh ]; then
    source "$HOME/fzf-git.sh/fzf-git.sh"
else
    echo "Warning: ~/fzf-git.sh/fzf-git.sh not found!"
fi


## zoxide
eval "$(zoxide init zsh)"


## starship
eval "$(starship init zsh)"


# direnv
eval "$(direnv hook zsh)"


# asdf
# https://asdf-vm.com/guide/getting-started.html
# git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.1
. "$HOME/.asdf/asdf.sh"
if ! command -v asdf > /dev/null 2>&1; then
  echo "warning: asdf not installed."
else
  . ~/.asdf/plugins/golang/set-env.zsh
fi



# sheldon
# https://github.com/rossmacarthur/sheldon
# curl --proto '=https' -fLsS https://rossmacarthur.github.io/install/crate.sh \
# | bash -s -- --repo rossmacarthur/sheldon --to ~/.local/bin
eval "$(sheldon source)"
if ! command -v sheldon > /dev/null 2>&1; then
  echo "warning: sheldon not installed."
fi


# forgit, installed by sheldon
# required to copy hash to clipboard using forgit
export FORGIT_COPY_CMD='xclip -selection clipboard'
# after `forgit` was loaded.
# must be after plugin manager, such as sheldon
export PATH="$PATH:$FORGIT_INSTALL_DIR/bin"

# zsh-autosuggest
bindkey '^ ' autosuggest-accept


# zsh-autocomplete, installed by sheldon
bindkey '^I' menu-select
bindkey "$terminfo[kcbt]" menu-select
bindkey -M menuselect '^I' menu-complete
bindkey -M menuselect "$terminfo[kcbt]" reverse-menu-complete


# atuin
# must be below sheldon, due to conflict with autocomplete
# https://docs.atuin.sh/guide/basic-usage
# curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh
#. "$HOME/.atuin/bin/env"
eval "$(atuin init zsh)"
if ! command -v atuin > /dev/null 2>&1; then
  echo "warning: atuin not installed."
fi


# gh cli
if ! command -v gh > /dev/null 2>&1; then
  echo "warning: gh cli not installed."
  echo "use 'sudo apt install gh' or 'sudo pacman -S gh'"
  echo "use 'gh extension install dlvhdr/gh-dash'"
fi


# zsh personal aliases
# must be below export PATHs, since it checks whether each command exists.
alias zalias="$CHEZ_EDITOR $HOME/.config/vimkim-scripts/zsh/aliases.zsh"
alias zali='zalias'
source "$HOME/.config/vimkim-scripts/zsh/aliases.zsh"

fastfetch -l ~/.config/my-assets/ferris.txt

# zprof
