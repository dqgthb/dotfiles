# zmodload zsh/zprof

# tmux start
tmux_new_if_cannot_attach() {
  if [ -n "$TERM_PROGRAM" ] && [ "$TERM_PROGRAM" = "WezTerm" ]; then
    tmux attach-session -t my-wezterm || tmux new-session -s my-wezterm

  elif [ -n "$WT_SESSION" ]; then
    tmux attach-session -t my-winterm || tmux new-session -s my-winterm

  elif [ -n "$TERM" ] && [ "$TERM" = "alacritty" ]; then
    tmux attach-session -t my-alacritty || tmux new-session -s my-alacritty

  else
    tmux attach-session || tmux new-session
  fi
}
alias tm='tmux_new_if_cannot_attach'

# Auto-run tmux if not on SSH
if [ -z "$SSH_CONNECTION" ] && [ "$TERM_PROGRAM" != "vscode" ]; then
  # Check if tmux is runnin:g
  if ! command -v tmux &>/dev/null; then
    echo "tmux is not installed. Please install tmux to use this feature."
  else
    if [ -z "$TMUX" ]; then
      tm
    fi
  fi
fi
# tmux end


if [[ -f /etc/centos-release ]]; then
  if grep -q "CentOS Linux release 7" /etc/centos-release; then
    export LANG=en_US.UTF-8
  fi
fi


if ! command -v nix > /dev/null 2>&1; then
    if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then . $HOME/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
fi


# Check if the terminal supports tmux-256color, and if not set it to xterm
if [ "$TERM" = "tmux-256color" ]; then
    if ! infocmp tmux-256color >/dev/null 2>&1; then
        export TERM=screen-256color
    fi
fi

# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH

# ohmyzsh
export ZSH="$HOME/.oh-my-zsh"

function colemak_l() {
    zle beginning-of-line
    zvm_enter_insert_mode
}

zvm_after_lazy_keybindings() {
    zvm_define_widget colemak_l

    bindkey -M vicmd 'l' zvm_enter_insert_mode
    zvm_bindkey vicmd 'L' colemak_l
    bindkey -M vicmd 'n' down-line-or-history
    bindkey -M vicmd 'e' up-line-or-history
    bindkey -M vicmd 'i' vi-forward-char
}

# ZVM_VI_INSERT_ESCAPE_BINDKEY=,s

plugins=(
    # git
    nvm
    # zsh-vi-mode
    # fzf-zsh-plugin
    zsh-autosuggestions
    # zsh-syntax-highlighting
    # fast-syntax-highlighting
    zsh-autocomplete
    forgit
)
source $ZSH/oh-my-zsh.sh

# zsh-autocomplete settings
bindkey '^I' menu-select
bindkey "$terminfo[kcbt]" menu-select
bindkey -M menuselect '^I' menu-complete
bindkey -M menuselect "$terminfo[kcbt]" reverse-menu-complete

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if command -v nvim >/dev/null 2>&1; then
    export EDITOR="nvim"
    export ZVM_VI_EDITOR="nvim"
    alias nh='nvim -c "set filetype=man"'
fi

export CHEZ_EDITOR='chezmoi edit --watch'

export PATH="$HOME/.local/bin:$PATH"

# NIX
## https://nixos.wiki/wiki/Locales
## if not set, lazygit on ubuntu will complain about locale
export LOCALE_ARCHIVE=/usr/lib/locale/locale-archive

my_nix_install() {
    if [ -x "$(command -v nix-env)" ]; then
        packages=(
            "nvim:nixpkgs.neovim"
            "git:nixpkgs.git"
            "lsd:nixpkgs.lsd"
            "fd:nixpkgs.fd"
            "zoxide:nixpkgs.zoxide"
            "rg:nixpkgs.ripgrep"
            "dust:nixpkgs.dust"
            "bat:nixpkgs.bat"
            "fastfetch:nixpkgs.fastfetch"
            "gita:nixpkgs.gita"
            "broot:nixpkgs.broot"
            "delta:nixpkgs.delta"
            "lazygit:nixpkgs.lazygit"
            "hexyl:nixpkgs.hexyl"
        )

        for package in "${packages[@]}"; do
            cmd="${package%%:*}"
            nixpkg="${package##*:}"
            if ! [ -x "$(command -v $cmd)" ]; then
                nix-env -iA "$nixpkg"
            fi
        done

    else
        echo "my warning: nix not installed"
    fi
}

# Function to check if a command exists
function command_exists {
    command -v "$1" >/dev/null 2>&1
}

# Conditionally set alias for `dust`
if command_exists dust; then
    alias du='dust'
fi

# Conditionally set alias for `bat`
if command_exists bat; then
    alias cat='bat'
fi

# Conditionally set alias for `broot`
if command_exists broot; then
    alias tree='broot'
fi

if command_exists difft; then
    alias diff='difft --color=always'
fi

if command_exists delta; then
    alias diff='delta'
    source <(delta --generate-completion zsh)
fi

if [ -x "$(command -v exa)" ]; then
    alias ls='exa -aF'
    alias l='exa -aF'
    alias la='exa -laF'
    alias ll='exa -laF'
    alias llg='exa -laF --git'
fi

if [ -x "$(command -v eza)" ]; then
    alias ls='eza -aF'
    alias l='eza -aF'
    alias la='eza -laF'
    alias ll='eza -laF'
    alias llg='eza -laF --git'
fi

if [ -x "$(command -v lsd)" ]; then
    alias ls='lsd -aF'
    alias l='lsd -aF'
    alias la='lsd -laF'
    alias ll='lsd -laF'
    alias llg='lsd -laF --git'
fi

if [ -x "$(command -v procs)" ]; then
  alias ps='procs --tree --thread'
fi

# init setup

## neovim
export PATH="$PATH:/opt/nvim-linux64/bin"

## zoxide
eval "$(zoxide init zsh)"

## starship
eval "$(starship init zsh)"

# echo nvm
# ## nvm
# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
# echo nvm end

export MAKEFLAGS="-j$(nproc)"


alias cmbd='cmake --build --preset debug'
alias cmd='cmake --preset debug'
alias cmbdi='cmake --build --preset debug --target install'

# Set JAVA_HOME
export JAVA_HOME=$(dirname $(dirname $(dirname $(readlink -f $(/usr/bin/which java)))))
export PATH=$JAVA_HOME/bin:$PATH

## CUBRID necessary env vars

# Check if the OS is CentOS 7 and source the devtoolset-8 script
if [[ -f /etc/centos-release ]]; then
  if grep -q "CentOS Linux release 7" /etc/centos-release; then
    source /opt/rh/devtoolset-8/enable
  fi
fi

# Enable fuzzy autocomplete
# e.g. ctda<tab> -> cu_trace_dump_all magic
# https://superuser.com/a/815317

if [ -n "${commands[fzf-share]}" ]; then
  source "$(fzf-share)/key-bindings.zsh"
  source "$(fzf-share)/completion.zsh"
fi


export LESS='-iRFSX'
export MANPAGER='nvim +Man!'
export MANWIDTH=999

# direnv
eval "$(direnv hook zsh)"

clip() {
    if grep -qi microsoft /proc/version; then
        clip.exe "$@"
    else
        xclip -selection clipboard "$@"
    fi
}

export PATH=$PATH:/usr/local/go/bin

export PATH=$PATH:$HOME/go/bin

# ccache
# Check if 'ccache' exists and if '/usr/lib/ccache' directory exists
if command -v ccache > /dev/null 2>&1 && [ -d "/usr/lib/ccache/bin" ];then
  # arch linux
  export PATH="/usr/lib/ccache/bin:$PATH"
elif command -v ccache >/dev/null 2>&1 && [ -d "/usr/lib/ccache" ]; then
  # ubuntu
  export PATH="/usr/lib/ccache:$PATH"
fi

if command -v fastfetch > /dev/null 2>&1; then
    fastfetch
fi

# Check if the OS is Arch Linux
if [[ -f /etc/os-release && $(grep -oP '(?<=^ID=).+' /etc/os-release) == "arch" ]]; then
  export CC=gcc-13
  export CXX=g++-13
fi

alias zalias="$CHEZ_EDITOR $HOME/.config/vimkim-scripts/zsh/aliases.zsh"
alias zali='zalias'
source "$HOME/.config/vimkim-scripts/zsh/aliases.zsh"

if [ -f ~/.fzf.zsh ]; then
    source ~/.fzf.zsh
else
    echo "Warning: ~/.fzf.zsh not found!"
fi

if [ -f ~/fzf-git.sh/fzf-git.sh ]; then
    source "$HOME/fzf-git.sh/fzf-git.sh"
else
    echo "Warning: ~/fzf-git.sh/fzf-git.sh not found!"
fi


# zprof

