# Function to check if we are in an SSH session
function is_ssh_session() {
    [[ -n "$SSH_CLIENT" || -n "$SSH_TTY" ]]
}

# Automatically start tmux if not already running and not in an SSH session
if [ -z "$TMUX" ] && ! is_ssh_session; then
    exec tmux
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git docker docker-compose node-bin)
# plugins+=(you-should-use)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='nvim'
else
    export EDITOR='code'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases

export PATH="$HOME/.local/bin:$PATH"

# Config profiles
alias zshconfig="$EDITOR ~/.zshrc"
alias zshprofile="$EDITOR ~/.zshrc"
alias profile="$EDITOR ~/.zshrc"
alias nvimprofile="$EDITOR ~/.config/nvim/init.vim"
alias vimprofile="$EDITOR ~/.vimrc"

# System aliases

if [ -x "$(command -v exa)" ]; then
    alias ls='exa -aF'
    alias l='exa -aF'
    alias la='exa -laF'
    alias ll='exa -laF'
    alias lsd='exa -laF --only-dirs'
else
    alias ls='ls -aF'
    alias l='ls -AF'
    alias la=' -lAF'
    alias ll='ls -lAF'
    alias lsd='ls -lAF --color=auto --group-directories-first | grep --color=never "^d"'
fi

alias which="which -a"
which-alias() {
    alias | grep "^$1"
}
alias du='dust'

## Safety Features
alias cp='cp -i' # confirm before overwriting something
alias mv='mv -i' # confirm before overwriting something

## utility aliases
mc() {
    mkdir $@
    cd $@
}

## Navigation aliases
function cl() {
    builtin cd "$@" && ls
}
alias cd='cl'
alias c='cd'
alias cz='DIR=$(zoxide query -l | fzf) && [[ -n $DIR ]] && cd "$DIR"'
alias cx='DIR=$(fdfind --type d | fzf) && [[ -n $DIR ]] && cd "$DIR"'
alias cf='cd "$(fdfind . --type f | fzf --height 40% --reverse | xargs -I {} dirname {})"'
alias up='cd ..'                                            # Move up one directory
alias back='cd -$OLDPWD'                                    # Return to the previous directory
alias pr='cd $(git rev-parse --show-toplevel || echo ".")'  # go to git root directory
alias pcd='cd $(git rev-parse --show-toplevel || echo ".")' # go to git root directory
alias gr='cd $(git rev-parse --show-toplevel || echo ".")'  # go to git root directory
alias gcd='cd $(git rev-parse --show-toplevel || echo ".")' # go to git root directory

function gcx() {
    local gitRoot=$(git rev-parse --show-toplevel 2>/dev/null || echo ".")
    cd "$gitRoot" || return

    local DIR=$(fdfind --type d . | fzf) && [[ -n $DIR ]] && cd "$DIR"
}

## Networking and System Information
alias ports='netstat -tulanp'
alias ipinfo='curl ipinfo.io' # Quick IP address and network info
alias myip='curl http://ipecho.net/plain
echo' # External IP address

# Git Aliases
alias ga='git add'
alias gc='git commit'
alias gcm='git commit -m'

## git diff
alias gd='git diff'
alias gds='git diff --staged'
alias gdc='git diff --cached'

## git log
alias gg='git-graph'
alias gl='git log --graph --pretty=format:"%C(auto)%h %an%d%n%w(0,4,4)%<(50,trunc)%s" --all'
alias gloga='git log --oneline --all --graph --decorate'

## git pull
alias gpl='git pull'
alias gpom='git pull origin main'

## git push
alias gfp='git fetch --prune'
alias gp='git push'
alias gps='git push'
alias gpsoh='git push origin HEAD'
alias gpoh='git push origin HEAD'

## git status
alias gs='git status'
alias gst='git status'

## git switch
alias gb='git branch'
alias gsw='git switch'
alias gco='git checkout'

## git etc
alias gcz="~/.local/bin/cz"
alias gfz="git fuzzy"

# Deveplopment and Programming aliases

## tmux
alias tm='tmux a || tmux'

## python
alias py='python3'

## docker
alias doc='docker' # Never use do. It is part of zsh shell grammar.
alias dc='docker compose'
alias dco='docker compose'
alias dcu='docker compose up'
alias dcub='docker compose up --build'
alias dcd='docker compose down'
alias dcr='docker compose run'
alias dcb='docker compose build'
alias dcl='docker compose logs'

# wsl aliases
alias wh="cd $(wslpath $(cmd.exe /C "echo %USERPROFILE%" 2>/dev/null | tr -d '\r'))"
alias ws="webstorm64.exe"
alias ii="explorer.exe"

# init setup

## neovim
export PATH="$PATH:/opt/nvim-linux64/bin"

## brew
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

## nvm

## zoxide
eval "$(zoxide init zsh)"

## fzf
eval "$(fzf --zsh)"

## starship
eval "$(starship init zsh)"

## zplug
source ~/.zplug/init.zsh
### plugins
zplug "MichaelAquilina/zsh-you-should-use"
zplug "bigH/git-fuzzy", as:command, use:"bin/git-fuzzy"
# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo
        zplug install
    fi
fi
zplug load --verbose

## nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

## pyenv
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
